
test_f3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003f4  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  000103f4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  000103f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003f4  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000103ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003f4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000083c  00000000  00000000  00010424  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000216  00000000  00000000  00010c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000078  00000000  00000000  00010e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000050  00000000  00000000  00010ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014d80  00000000  00000000  00010f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000098c  00000000  00000000  00025cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072529  00000000  00000000  0002664c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00098b75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d8  00000000  00000000  00098bf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003d4 	.word	0x080003d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003d4 	.word	0x080003d4

080001c8 <SystemInit>:
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <SystemInit+0x28>)
 80001ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001d2:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <SystemInit+0x28>)
 80001d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <SystemInit+0x28>)
 80001de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	e000ed00 	.word	0xe000ed00

080001f4 <delay_ms>:
#include "stm32f3xx.h"
#include "main.h"

void delay_ms(uint16_t value)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	80fb      	strh	r3, [r7, #6]
  TIM2->ARR = value;                  //загрузить значение задержки
 80001fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000202:	88fb      	ldrh	r3, [r7, #6]
 8000204:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIM2->CNT = 0;
 8000206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800020a:	2200      	movs	r2, #0
 800020c:	625a      	str	r2, [r3, #36]	; 0x24
  TIM2->CR1 = TIM_CR1_CEN;	      // запустить таймер
 800020e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
  while((TIM2->SR & TIM_SR_UIF)==0){} // дождаться конца задержки
 8000216:	bf00      	nop
 8000218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021c:	691b      	ldr	r3, [r3, #16]
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d0f8      	beq.n	8000218 <delay_ms+0x24>
  TIM2->SR &= ~TIM_SR_UIF;	      // сбросить флаг
 8000226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800022a:	691b      	ldr	r3, [r3, #16]
 800022c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000230:	f023 0301 	bic.w	r3, r3, #1
 8000234:	6113      	str	r3, [r2, #16]
}
 8000236:	bf00      	nop
 8000238:	370c      	adds	r7, #12
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
	...

08000244 <main>:

int main(){
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	/*кнопка PA0*/
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000248:	4b39      	ldr	r3, [pc, #228]	; (8000330 <main+0xec>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a38      	ldr	r2, [pc, #224]	; (8000330 <main+0xec>)
 800024e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000252:	6153      	str	r3, [r2, #20]
	GPIOA->MODER &=~ GPIO_MODER_MODER0;
 8000254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800025e:	f023 0303 	bic.w	r3, r3, #3
 8000262:	6013      	str	r3, [r2, #0]
//	GPIOA->MODER |= GPIO_MODER_MODER0_0; // подключаем регистр режима работы для пинов 0 порта А
	GPIOA->OTYPER &=~ GPIO_OTYPER_OT_0; // подключаем регистр "подтяжки" сигнала для пинов 0 порта А
 8000264:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800026e:	f023 0301 	bic.w	r3, r3, #1
 8000272:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_0; // подключаем регистр скорости работы сигнала для пинов 0 порта А
 8000274:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6093      	str	r3, [r2, #8]

	/*светодиод PE8*/
	RCC->AHBENR |= RCC_AHBENR_GPIOEEN; // подать тактирование на PE8
 8000284:	4b2a      	ldr	r3, [pc, #168]	; (8000330 <main+0xec>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a29      	ldr	r2, [pc, #164]	; (8000330 <main+0xec>)
 800028a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800028e:	6153      	str	r3, [r2, #20]
	GPIOE->MODER &= ~GPIO_MODER_MODER8; //
 8000290:	4b28      	ldr	r3, [pc, #160]	; (8000334 <main+0xf0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a27      	ldr	r2, [pc, #156]	; (8000334 <main+0xf0>)
 8000296:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800029a:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= GPIO_MODER_MODER8_0; // MODER6[1:0] = 01 - General purpose output mode
 800029c:	4b25      	ldr	r3, [pc, #148]	; (8000334 <main+0xf0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a24      	ldr	r2, [pc, #144]	; (8000334 <main+0xf0>)
 80002a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002a6:	6013      	str	r3, [r2, #0]

	GPIOE->MODER &= ~GPIO_MODER_MODER9;
 80002a8:	4b22      	ldr	r3, [pc, #136]	; (8000334 <main+0xf0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a21      	ldr	r2, [pc, #132]	; (8000334 <main+0xf0>)
 80002ae:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= GPIO_MODER_MODER9_0;
 80002b4:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <main+0xf0>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a1e      	ldr	r2, [pc, #120]	; (8000334 <main+0xf0>)
 80002ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002be:	6013      	str	r3, [r2, #0]
//	GPIOE->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR15;
//	GPIOE->PUPDR &= ~GPIO_PUPDR_PUPDR15;
//	GPIOE->BSRR &= ~GPIO_BSRR_BS_15;

	/*delay*/
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;   //подать тактирование на TIM2
 80002c0:	4b1b      	ldr	r3, [pc, #108]	; (8000330 <main+0xec>)
 80002c2:	69db      	ldr	r3, [r3, #28]
 80002c4:	4a1a      	ldr	r2, [pc, #104]	; (8000330 <main+0xec>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = 8000-1;               //настроить делитель для формирования миллисекунд
 80002cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002d4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->CR1 = TIM_CR1_OPM;
 80002d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002da:	2208      	movs	r2, #8
 80002dc:	601a      	str	r2, [r3, #0]

	while(1){
		GPIOE->BSRR |= GPIO_BSRR_BS_8; // переключить состоятние порта диода
 80002de:	4b15      	ldr	r3, [pc, #84]	; (8000334 <main+0xf0>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4a14      	ldr	r2, [pc, #80]	; (8000334 <main+0xf0>)
 80002e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e8:	6193      	str	r3, [r2, #24]
		delay_ms(500); // задержка
 80002ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ee:	f7ff ff81 	bl	80001f4 <delay_ms>
		GPIOE->BSRR |= GPIO_BSRR_BR_8;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <main+0xf0>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <main+0xf0>)
 80002f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002fc:	6193      	str	r3, [r2, #24]
		delay_ms(500);
 80002fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000302:	f7ff ff77 	bl	80001f4 <delay_ms>

		if ((GPIOA->IDR & GPIO_IDR_0) != 0){
 8000306:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800030a:	691b      	ldr	r3, [r3, #16]
 800030c:	f003 0301 	and.w	r3, r3, #1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d006      	beq.n	8000322 <main+0xde>
			GPIOE->BSRR |= GPIO_BSRR_BS_9;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <main+0xf0>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a06      	ldr	r2, [pc, #24]	; (8000334 <main+0xf0>)
 800031a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	e7dd      	b.n	80002de <main+0x9a>
		} else {
			GPIOE->BSRR |= GPIO_BSRR_BR_9;
 8000322:	4b04      	ldr	r3, [pc, #16]	; (8000334 <main+0xf0>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	4a03      	ldr	r2, [pc, #12]	; (8000334 <main+0xf0>)
 8000328:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800032c:	6193      	str	r3, [r2, #24]
		GPIOE->BSRR |= GPIO_BSRR_BS_8; // переключить состоятние порта диода
 800032e:	e7d6      	b.n	80002de <main+0x9a>
 8000330:	40021000 	.word	0x40021000
 8000334:	48001000 	.word	0x48001000

08000338 <Reset_Handler>:
 8000338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000370 <LoopForever+0x2>
 800033c:	2100      	movs	r1, #0
 800033e:	e003      	b.n	8000348 <LoopCopyDataInit>

08000340 <CopyDataInit>:
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <LoopForever+0x6>)
 8000342:	585b      	ldr	r3, [r3, r1]
 8000344:	5043      	str	r3, [r0, r1]
 8000346:	3104      	adds	r1, #4

08000348 <LoopCopyDataInit>:
 8000348:	480b      	ldr	r0, [pc, #44]	; (8000378 <LoopForever+0xa>)
 800034a:	4b0c      	ldr	r3, [pc, #48]	; (800037c <LoopForever+0xe>)
 800034c:	1842      	adds	r2, r0, r1
 800034e:	429a      	cmp	r2, r3
 8000350:	d3f6      	bcc.n	8000340 <CopyDataInit>
 8000352:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <LoopForever+0x12>)
 8000354:	e002      	b.n	800035c <LoopFillZerobss>

08000356 <FillZerobss>:
 8000356:	2300      	movs	r3, #0
 8000358:	f842 3b04 	str.w	r3, [r2], #4

0800035c <LoopFillZerobss>:
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <LoopForever+0x16>)
 800035e:	429a      	cmp	r2, r3
 8000360:	d3f9      	bcc.n	8000356 <FillZerobss>
 8000362:	f7ff ff31 	bl	80001c8 <SystemInit>
 8000366:	f000 f811 	bl	800038c <__libc_init_array>
 800036a:	f7ff ff6b 	bl	8000244 <main>

0800036e <LoopForever>:
 800036e:	e7fe      	b.n	800036e <LoopForever>
 8000370:	2000a000 	.word	0x2000a000
 8000374:	080003f4 	.word	0x080003f4
 8000378:	20000000 	.word	0x20000000
 800037c:	20000000 	.word	0x20000000
 8000380:	20000000 	.word	0x20000000
 8000384:	2000001c 	.word	0x2000001c

08000388 <ADC1_2_IRQHandler>:
 8000388:	e7fe      	b.n	8000388 <ADC1_2_IRQHandler>
	...

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	4e0d      	ldr	r6, [pc, #52]	; (80003c4 <__libc_init_array+0x38>)
 8000390:	4c0d      	ldr	r4, [pc, #52]	; (80003c8 <__libc_init_array+0x3c>)
 8000392:	1ba4      	subs	r4, r4, r6
 8000394:	10a4      	asrs	r4, r4, #2
 8000396:	2500      	movs	r5, #0
 8000398:	42a5      	cmp	r5, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	4e0b      	ldr	r6, [pc, #44]	; (80003cc <__libc_init_array+0x40>)
 800039e:	4c0c      	ldr	r4, [pc, #48]	; (80003d0 <__libc_init_array+0x44>)
 80003a0:	f000 f818 	bl	80003d4 <_init>
 80003a4:	1ba4      	subs	r4, r4, r6
 80003a6:	10a4      	asrs	r4, r4, #2
 80003a8:	2500      	movs	r5, #0
 80003aa:	42a5      	cmp	r5, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003b4:	4798      	blx	r3
 80003b6:	3501      	adds	r5, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003be:	4798      	blx	r3
 80003c0:	3501      	adds	r5, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
